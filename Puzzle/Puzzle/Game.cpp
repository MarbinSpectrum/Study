#include "Puzzle.h"

int main()
{
	/*
	//Run();

	// 스택영역
	// 일반 변수에는 값만 받음
	int data = 10;

	//메모리 주소값만 받음
	int *pData = &data;

	//  *pData  :  pData들어있는 주소에 저장값
	//  pData   :  pData가 들어가있는 주소값
	//  &pData  :  pData의 주소값

	// 포인터의 주소값을 받음

	int **ppData = &pData;

	//printf("%d\n", &pData);
//	printf("%d\n", ppData);

	//int a = 10;

	//char *p = (char*)&a;

	//printf("%d\n", &a);
	//printf("%d ", &p[0]);
	//printf("%d ", &p[1]);
	//printf("%d ", &p[2]);
	//printf("%d ", &p[3]);

	//printf("%d ", p[0]);
	//printf("%d ", p[1]);
	//printf("%d ", p[2]);
	//printf("%d ", p[3]);

	int arr[] = { 1,2,3,4,5 };

	float *pi = (float*) arr;

	int *p1 = &arr[0];
	int *p2 = &arr[4];



	printf("%d ", (*p1 + &p2));
	printf("%d ", *(pi + 1));
	printf("%d ", *(pi + 2));
	printf("%d ", pi);
	printf("%d ", (pi + 1));
	printf("%d ", (pi + 2));

	//void 형 포인터 변수에는 포인터 변수의 데이터 타입을 가리지 않고. 저장하고 활용 할 수 있다.

	int *PP;
	void *pVoid = PP;
	pVoid = p1;

	memset(&arr, 0, sizeof(arr));

	Vector2 *pos;

	pos = (Vector2*)malloc(sizeof(Vector2) * 12);
	free(pos);
	pos = NULL;
	*/

	//B.Print();
	
	int a = 4;
	switch (a)
	{
	default:
	case 1:
	case 2:
		break;
	}

	Run();

}
